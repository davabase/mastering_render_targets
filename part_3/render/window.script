function init(self)
	-- Enable input.
	msg.post(".", "acquire_input_focus")

	-- Calculate the bounding box.
	local position = go.get_position()
	local scale = go.get_scale()
	self.left = position.x - scale.x / 2
	self.right = position.x + scale.x / 2
	self.bottom = position.y - scale.y / 2
	self.top = position.y + scale.y / 2

	-- Send the parameters to the render script.
	msg.post('@render:', 'update_window_box', { left = self.left, right = self.right, bottom = self.bottom, top = self.top })

	-- Initialize variables.
	self.dragging = false
	self.mouse_position = vmath.vector3()
end

function update(self, dt)
	-- Drag.
	if self.dragging then
		go.set_position(self.mouse_position - self.offset)
	end

	-- Calculate the bounding box.
	local position = go.get_position()
	local scale = go.get_scale()
	self.left = position.x - scale.x / 2
	self.right = position.x + scale.x / 2
	self.bottom = position.y - scale.y / 2
	self.top = position.y + scale.y / 2

	-- Send the parameters to the render script.
	msg.post('@render:', 'update_window_box', { left = self.left, right = self.right, bottom = self.bottom, top = self.top })

	-- Draw red lines around the window with a 1 pixel border.
	local red = vmath.vector4(1, 0, 0, 1)
	msg.post("@render:", "draw_line", { start_point = vmath.vector3(self.left - 1, self.bottom - 1, 0), end_point = vmath.vector3(self.left - 1, self.top + 1, 0), color = red })
	msg.post("@render:", "draw_line", { start_point = vmath.vector3(self.left - 1, self.top + 1, 0), end_point = vmath.vector3(self.right + 1, self.top + 1, 0), color = red })
	msg.post("@render:", "draw_line", { start_point = vmath.vector3(self.right + 1, self.top + 1, 0), end_point = vmath.vector3(self.right + 1, self.bottom - 1, 0), color = red })
	msg.post("@render:", "draw_line", { start_point = vmath.vector3(self.right + 1, self.bottom - 1, 0), end_point = vmath.vector3(self.left - 1, self.bottom - 1, 0), color = red })
end

function on_input(self, action_id, action)
	-- Check if we have clicked inside the window.
	if action_id == hash("mouse_button_left") then
		-- Save the mouse position as a vector.
		self.mouse_position = vmath.vector3(action.x, action.y, 0)
		if action.pressed then
			if action.x > self.left and action.x < self.right and action.y > self.bottom and action.y < self.top then
				-- If we are inside the window calculate the offset and set dragging.
				self.offset = self.mouse_position - go.get_position()
				self.dragging = true
			end
		elseif action.released then
			-- If we have released the mouse unset dragging.
			self.dragging = false
		end
	end
end
